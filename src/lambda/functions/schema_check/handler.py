"""Schema change check Lambda.

Compares curated schema fingerprint (current.json) with the latest fingerprint
generated by the Glue job (artifacts bucket), then decides whether a crawler
should run based on `catalog_update` policy.

Policy:
- catalog_update = "force" -> always run crawler
- catalog_update = "never" -> never run crawler
- catalog_update = "on_schema_change" (default) -> run only when changed

Inputs (event):
  {
    "domain": "customer-data",
    "table_name": "orders",
    "catalog_update": "on_schema_change|never|force"  # optional
  }

Env:
- ENVIRONMENT: str
- CURATED_BUCKET: str
- ARTIFACTS_BUCKET: str
- CATALOG_UPDATE_DEFAULT: str (optional)

Outputs:
  {
    "schema_changed": bool,
    "should_crawl": bool,
    "current_hash": str | null,
    "latest_hash": str | null,
    "error": {"code": str, "message": str} | optional
  }
"""

from __future__ import annotations

import json
import os
import hashlib
from typing import Any, Dict, Optional

import boto3
from botocore.exceptions import ClientError


def _stable_hash(obj: Any) -> str:
    s = json.dumps(obj, sort_keys=True, separators=(",", ":"))
    return hashlib.sha256(s.encode("utf-8")).hexdigest()


def _get_json_from_s3(s3_client, bucket: str, key: str) -> Optional[Dict[str, Any]]:
    try:
        resp = s3_client.get_object(Bucket=bucket, Key=key)
        body = resp["Body"].read()
        return json.loads(body.decode("utf-8"))
    except ClientError as e:
        code = e.response.get("Error", {}).get("Code")
        if code in {"NoSuchKey", "404"}:
            return None
        raise


def _put_json_to_s3(s3_client, bucket: str, key: str, obj: Dict[str, Any]) -> None:
    s3_client.put_object(
        Bucket=bucket,
        Key=key,
        Body=json.dumps(obj).encode("utf-8"),
        ContentType="application/json",
    )


def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    domain = str(event.get("domain", "")).strip()
    table_name = str(event.get("table_name", "")).strip()
    if not domain or not table_name:
        return {
            "schema_changed": False,
            "should_crawl": False,
            "error": {
                "code": "PRE_VALIDATION_FAILED",
                "message": "domain/table_name required",
            },
        }

    curated_bucket = os.environ.get("CURATED_BUCKET", "")
    artifacts_bucket = os.environ.get("ARTIFACTS_BUCKET", "")
    if not curated_bucket or not artifacts_bucket:
        return {
            "schema_changed": False,
            "should_crawl": False,
            "error": {
                "code": "PRE_VALIDATION_FAILED",
                "message": "bucket env missing",
            },
        }

    policy = (event.get("catalog_update") or os.environ.get("CATALOG_UPDATE_DEFAULT") or "on_schema_change").lower()
    if policy not in {"on_schema_change", "never", "force"}:
        policy = "on_schema_change"

    s3 = boto3.client("s3")
    curated_current_key = f"{domain}/{table_name}/_schema/current.json"
    # Artifacts path aligned to spec: <domain>/<table>/_schema/latest.json
    artifacts_latest_key = f"{domain}/{table_name}/_schema/latest.json"

    latest = _get_json_from_s3(s3, artifacts_bucket, artifacts_latest_key)
    if latest is None:
        # No latest fingerprint produced by Glue -> nothing to do
        return {
            "schema_changed": False,
            "should_crawl": False,
            "current_hash": None,
            "latest_hash": None,
            "error": {
                "code": "SCHEMA_CHECK_FAILED",
                "message": "latest schema fingerprint not found",
            },
        }

    # Prefer explicit 'hash' field; fallback to hash of normalized structure
    latest_hash = str(latest.get("hash")) if isinstance(latest.get("hash"), str) else _stable_hash(latest)

    current = _get_json_from_s3(s3, curated_bucket, curated_current_key)
    if current is None:
        changed = True
        current_hash = None
    else:
        current_hash = str(current.get("hash")) if isinstance(current.get("hash"), str) else _stable_hash(current)
        changed = current_hash != latest_hash

    if policy == "force":
        should_crawl = True
    elif policy == "never":
        should_crawl = False
    else:
        should_crawl = changed

    # If changed and crawl allowed, persist latest -> curated current
    if changed and policy != "never":
        _put_json_to_s3(s3, curated_bucket, curated_current_key, latest)

    return {
        "schema_changed": changed,
        "should_crawl": should_crawl,
        "current_hash": current_hash,
        "latest_hash": latest_hash,
    }
