name: PR Validation

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

permissions:
  contents: read

concurrency:
  group: pr-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
      
      - name: Setup Python (py or deps changed)
        if: steps.changed-files.outputs.any_changed == 'true' && (contains(steps.changed-files.outputs.all_changed_files, '.py') || contains(steps.changed-files.outputs.all_changed_files, 'requirements.txt') || contains(steps.changed-files.outputs.all_changed_files, 'pyproject.toml') || contains(steps.changed-files.outputs.all_changed_files, 'setup.cfg') || contains(steps.changed-files.outputs.all_changed_files, 'setup.py'))
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Setup Node.js (infra changed, cache)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') && hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Node.js (infra changed, no cache)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') && hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') == ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install Python deps (py or deps changed)
        if: steps.changed-files.outputs.any_changed == 'true' && (contains(steps.changed-files.outputs.all_changed_files, '.py') || contains(steps.changed-files.outputs.all_changed_files, 'requirements.txt') || contains(steps.changed-files.outputs.all_changed_files, 'pyproject.toml') || contains(steps.changed-files.outputs.all_changed_files, 'setup.cfg') || contains(steps.changed-files.outputs.all_changed_files, 'setup.py'))
        run: |
          pip install -r requirements.txt

      - name: Install Node deps (infra changed, has lockfile)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') && hashFiles('**/package-lock.json') != ''
        run: npm ci

      - name: Install CDK CLI (infra changed, no lockfile)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') && hashFiles('**/package-lock.json') == ''
        run: npm install -g aws-cdk@latest
      
      - name: Lint/Format Python (py changed)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, '.py')
        run: |
          echo "🐍 Linting/formatting changed Python files..."
          CHANGED=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E "\.py$" || true)
          if [ -n "$CHANGED" ]; then
            echo "$CHANGED" | xargs -r ruff format --check --force-exclude
            echo "$CHANGED" | xargs -r ruff check --force-exclude --output-format=github
          fi

      - name: Type check (mypy, py changed)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, '.py')
        run: |
          echo "🔎 Type checking changed Python files..."
          CHANGED=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E "\.py$" || true)
          if [ -z "$CHANGED" ]; then
            echo "No changed Python files. Skipping mypy."
            exit 0
          fi

          MOD_ARGS=()
          FILE_ARGS=()
          # Helper to append a module once (dedupe)
          add_mod() {
            local m="$1"
            for i in "${!MOD_ARGS[@]}"; do
              if [[ "${MOD_ARGS[$i]}" == "-m" && "${MOD_ARGS[$((i+1))]}" == "$m" ]]; then
                return 0
              fi
            done
            MOD_ARGS+=("-m" "$m")
          }
          while IFS= read -r f; do
            if [[ "$f" == src/* ]]; then
              # Convert src/path/to/module.py -> module path (e.g., glue.lib...)
              mod=${f#src/}
              if [[ "$mod" == */__init__.py ]]; then
                mod=${mod%/__init__.py}
              else
                mod=${mod%.py}
              fi
              # Skip if empty (defensive)
              if [[ -z "$mod" ]]; then
                continue
              fi
              mod=${mod//\//.}
              add_mod "$mod"
            else
              FILE_ARGS+=("$f")
            fi
          done <<< "$CHANGED"

          echo "mypy module args: ${MOD_ARGS[*]}"
          echo "mypy file args: ${FILE_ARGS[*]}"
          # Use config from pyproject.toml; rely on mypy_path=["src"] and explicit_package_bases
          mypy "${MOD_ARGS[@]}" "${FILE_ARGS[@]}" --ignore-missing-imports
          
      - name: CDK synth (local cdk, has lockfile)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') && hashFiles('**/package-lock.json') != ''
        run: |
          echo "🏗️ Validating CDK infrastructure (local cdk)..."
          npx cdk synth --context environment=dev

      - name: CDK synth (global cli, no lockfile)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') && hashFiles('**/package-lock.json') == ''
        run: |
          echo "🏗️ Validating CDK infrastructure (global cli)..."
          cdk synth --context environment=dev
          
      - name: Quick tests (py changed)
        if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, '.py')
        run: |
          echo "🧪 Running quick tests..."
          if [ -d "tests/" ] && find tests/ -name "test_*.py" -type f | head -1 | grep -q .; then
            pytest tests/ -v --tb=short -x --maxfail=3
          else
            echo "No tests found - skipping"
          fi
          echo "✅ PR validation complete!"
