name: PR Validation

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

permissions:
  contents: read

concurrency:
  group: pr-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: &python_version '3.12'
  NODE_VERSION: &node_version '20'

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            python:
              - '**/*.py'
              - 'requirements.txt'
              - 'pyproject.toml'
              - 'setup.cfg'
              - 'setup.py'
            infra:
              - 'infrastructure/**'
            node:
              - 'package.json'
              - 'package-lock.json'
              - 'npm-shrinkwrap.json'
              - 'yarn.lock'

      - name: Setup Python
        if: ${{ steps.changed-files.outputs.python_any_changed == 'true' || steps.changed-files.outputs.infra_any_changed == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        if: ${{ steps.changed-files.outputs.python_any_changed == 'true' || steps.changed-files.outputs.infra_any_changed == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Security audit (bandit)
        if: ${{ steps.changed-files.outputs.python_any_changed == 'true' || steps.changed-files.outputs.infra_any_changed == 'true' }}
        run: |
          set -o pipefail
          echo "üîê Running Bandit security audit (src, infrastructure, scripts)..."
          bandit -c bandit.yaml --severity-level medium --confidence-level medium -r src infrastructure scripts -f json -o bandit-report.json
          bandit_exit=$?
          python - <<'PY' > bandit-report.md
          import json
          import pathlib

          report_path = pathlib.Path('bandit-report.json')
          if not report_path.exists():
              print('### Bandit Security Audit\n\nÎ≥¥Í≥†ÏÑúÎ•º ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.')
              raise SystemExit(0)

          data = json.loads(report_path.read_text())
          issues = data.get('results', [])

          severity_counts = {}
          for item in issues:
              severity = item.get('issue_severity', 'UNDEFINED')
              severity_counts[severity] = severity_counts.get(severity, 0) + 1

          severity_order = {"CRITICAL": 0, "HIGH": 1, "MEDIUM": 2, "LOW": 3, "UNDEFINED": 4}
          ordered_counts = sorted(
              severity_counts.items(),
              key=lambda kv: severity_order.get(kv[0], 99)
          )

          print('### Bandit Security Audit')
          print()
          if not issues:
              print('‚úÖ No findings with medium severity or higher.')
          else:
              total = len(issues)
              summary = ', '.join(f"{level}: {count}" for level, count in ordered_counts)
              print(f'‚ùå {total} issue(s) detected (severity counts ‚Üí {summary}).')
              print()
              print('| Severity | Confidence | Location | Test | Message |')
              print('| --- | --- | --- | --- | --- |')
              for item in issues[:10]:
                  severity = item.get('issue_severity', 'NA')
                  confidence = item.get('issue_confidence', 'NA')
                  fname = item.get('filename', 'NA')
                  line = item.get('line_number', 'NA')
                  test_id = item.get('test_id', 'NA')
                  text = item.get('issue_text', '').replace('\n', ' ')
                  location = f"{fname}:{line}"
                  print(f"| {severity} | {confidence} | `{location}` | {test_id} | {text} |")
              if total > 10:
                  print()
                  print(f'_Showing first 10 of {total} findings. Review `bandit-report.json` for the full report._')

          PY
          cat bandit-report.md >> "$GITHUB_STEP_SUMMARY"
          exit $bandit_exit

      - name: Dependency vulnerability scan (safety)
        if: ${{ steps.changed-files.outputs.python_any_changed == 'true' || steps.changed-files.outputs.infra_any_changed == 'true' }}
        run: |
          set -o pipefail
          echo "üõ°Ô∏è Running Safety vulnerability scan..."
          safety check --full-report --output text | tee safety-report.txt
          safety_exit=$?
          {
            echo '### Safety Dependency Scan'
            echo
            if [ -s safety-report.txt ]; then
              cat safety-report.txt
            else
              echo 'Í≤∞Í≥º Î≥¥Í≥†ÏÑúÎ•º ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.'
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          exit $safety_exit

      - name: Prepare Python file list
        if: ${{ steps.changed-files.outputs.python_any_changed == 'true' }}
        env:
          PY_FILES: ${{ steps.changed-files.outputs.python_files }}
        run: |
          python - <<'PY' > .changed-python-files
          import json
          import os
          import sys

          raw_payload = os.environ.get('PY_FILES', '').strip()
          if not raw_payload:
            files = []
          else:
            try:
              files = json.loads(raw_payload)
            except json.JSONDecodeError as exc:
              raise SystemExit(f"Failed to parse PY_FILES JSON: {exc}; payload={raw_payload!r}") from exc

          sys.stdout.write("\n".join(files))
          PY

      - name: Run pre-commit on changed Python files
        if: ${{ steps.changed-files.outputs.python_any_changed == 'true' }}
        run: |
          if [ ! -s .changed-python-files ]; then
            exit 0
          fi
          mapfile -t PY_CHANGED < .changed-python-files
          if [ ${#PY_CHANGED[@]} -eq 0 ]; then
            exit 0
          fi
          pre-commit run --files --show-diff-on-failure "${PY_CHANGED[@]}"

      - name: Type check (mypy)
        if: ${{ steps.changed-files.outputs.python_any_changed == 'true' }}
        run: |
          if [ ! -s .changed-python-files ]; then
            echo "No changed Python files. Skipping mypy."
            exit 0
          fi
          mapfile -t PY_CHANGED < .changed-python-files
          if [ ${#PY_CHANGED[@]} -eq 0 ]; then
            echo "No changed Python files. Skipping mypy."
            exit 0
          fi
          python -m mypy "${PY_CHANGED[@]}"

      - name: Setup Node.js (infra changed, cache)
        if: ${{ steps.changed-files.outputs.infra_any_changed == 'true' && hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Node.js (infra changed, no lockfile)
        if: ${{ steps.changed-files.outputs.infra_any_changed == 'true' && hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node deps (infra changed)
        if: ${{ steps.changed-files.outputs.infra_any_changed == 'true' && hashFiles('**/package-lock.json') != '' }}
        run: npm ci

      - name: Install CDK CLI (infra changed, no lockfile)
        if: ${{ steps.changed-files.outputs.infra_any_changed == 'true' && hashFiles('**/package-lock.json') == '' }}
        run: npm install --no-save aws-cdk@latest

      - name: CDK synth (infra changed)
        if: ${{ steps.changed-files.outputs.infra_any_changed == 'true' }}
        run: |
          echo "üèóÔ∏è Validating CDK infrastructure..."
          npx cdk synth --context environment=dev

  tests:
    uses: ./.github/workflows/ci.yml
    with:
      python-version: *python_version
      run-precommit: false
    secrets: inherit
