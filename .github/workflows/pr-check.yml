name: PR Validation

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

permissions:
  contents: read
  pull-requests: read # ÏµúÏÜå Í∂åÌïú: Î≥ÄÍ≤Ω ÌååÏùº ÌôïÏù∏ Î∞è Ï≤¥ÌÅ¨ Î≥¥Í≥†Ïö©ÏúºÎ°ú Ï∂©Î∂Ñ

concurrency:
  group: pr-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  AWS_CDK_VERSION: '2.150.0'

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@1754cd4b9e661d1f0eced3b33545a8d8b3bc46d8 # v44.5.0

      - name: Classify change scope
        id: change-flags
        shell: bash
        run: |
          set -euo pipefail
          python_changed=false
          python_manifest_changed=false
          infra_changed=false

          while IFS= read -r file; do
            [[ -z "$file" ]] && continue
            if [[ "$file" == *.py ]]; then
              python_changed=true
            fi
            case "$file" in
              requirements.txt|pyproject.toml|setup.cfg|setup.py)
                python_manifest_changed=true
                ;;
            esac
            if [[ "$file" == infrastructure/* ]]; then
              infra_changed=true
            fi
          done <<< "${{ steps.changed-files.outputs.all_changed_files }}"

          if [[ "$python_changed" == true || "$python_manifest_changed" == true ]]; then
            python_setup_needed=true
          else
            python_setup_needed=false
          fi

          if [[ -f requirements.txt ]]; then
            python_manifest=requirements
          elif [[ -f pyproject.toml ]]; then
            python_manifest=pyproject
          else
            python_manifest=none
          fi

          {
            echo "python_changed=$python_changed"
            echo "python_manifest_changed=$python_manifest_changed"
            echo "python_setup_needed=$python_setup_needed"
            echo "infra_changed=$infra_changed"
            echo "python_manifest=$python_manifest"
          } >> "$GITHUB_OUTPUT"

      - name: Setup Python (py or deps changed)
        if: steps.change-flags.outputs.python_setup_needed == 'true'
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install Python lint tooling
        if: steps.change-flags.outputs.python_setup_needed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade --no-cache-dir pip
          python -m pip install --no-cache-dir ruff mypy

      - name: Install Python deps (py or deps changed)
        if: steps.change-flags.outputs.python_setup_needed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          case "${{ steps.change-flags.outputs.python_manifest }}" in
            requirements)
              python -m pip install --no-cache-dir -r requirements.txt
              ;;
            pyproject)
              python -m pip install --no-cache-dir .
              ;;
            *)
              echo "No Python dependency manifest detected; skipping project install."
              ;;
          esac

      - name: Setup Node.js (infra changed)
        if: steps.change-flags.outputs.infra_changed == 'true'
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: |
            infrastructure/package-lock.json
            infrastructure/npm-shrinkwrap.json
            infrastructure/yarn.lock

      - name: Install Node deps (infra changed, has lockfile)
        if: steps.change-flags.outputs.infra_changed == 'true' && hashFiles('infrastructure/package-lock.json', 'infrastructure/npm-shrinkwrap.json', 'infrastructure/yarn.lock') != ''
        shell: bash
        working-directory: infrastructure
        run: |
          set -euo pipefail
          npm ci

      - name: Install Node deps (infra changed, no lockfile)
        if: steps.change-flags.outputs.infra_changed == 'true' && hashFiles('infrastructure/package-lock.json', 'infrastructure/npm-shrinkwrap.json', 'infrastructure/yarn.lock') == ''
        shell: bash
        working-directory: infrastructure
        run: |
          set -euo pipefail
          if [[ -f package.json ]]; then
            npm install
          else
            echo "No package.json found in infrastructure/. Skipping npm install."
          fi

      - name: Lint/Format Python (py changed)
        if: steps.change-flags.outputs.python_changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t changed_py < <(printf '%s\n' "${{ steps.changed-files.outputs.all_changed_files }}" | grep -E '\.py$' || true)
          if [[ "${#changed_py[@]}" -eq 0 ]]; then
            echo "No changed Python files. Skipping ruff."
            exit 0
          fi
          printf '%s\n' "${changed_py[@]}" | xargs -r ruff format --check --force-exclude
          printf '%s\n' "${changed_py[@]}" | xargs -r ruff check --force-exclude --output-format=github

      - name: Type check (mypy, py changed)
        if: steps.change-flags.outputs.python_changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t changed_py < <(printf '%s\n' "${{ steps.changed-files.outputs.all_changed_files }}" | grep -E '\.py$' || true)
          if [[ "${#changed_py[@]}" -eq 0 ]]; then
            echo "No changed Python files. Skipping mypy."
            exit 0
          fi

          MOD_ARGS=()
          FILE_ARGS=()

          add_mod() {
            local module="$1"
            for ((i = 0; i < ${#MOD_ARGS[@]}; i+=2)); do
              if [[ "${MOD_ARGS[$i+1]}" == "$module" ]]; then
                return 0
              fi
            done
            MOD_ARGS+=("-m" "$module")
          }

          for f in "${changed_py[@]}"; do
            if [[ "$f" == src/* ]]; then
              mod="${f#src/}"
              if [[ "$mod" == */__init__.py ]]; then
                mod="${mod%/__init__.py}"
              else
                mod="${mod%.py}"
              fi
              [[ -z "$mod" ]] && continue
              mod="${mod//\//.}"
              add_mod "$mod"
            else
              FILE_ARGS+=("$f")
            fi
          done

          if [[ ${#MOD_ARGS[@]} -gt 0 ]]; then
            echo "Running mypy on modules: ${MOD_ARGS[*]}"
            mypy --show-error-codes --hide-error-context --no-error-summary "${MOD_ARGS[@]}"
          fi
          if [[ ${#FILE_ARGS[@]} -gt 0 ]]; then
            echo "Running mypy on file paths: ${FILE_ARGS[*]}"
            mypy --show-error-codes --hide-error-context --no-error-summary "${FILE_ARGS[@]}"
          fi

      - name: CDK synth (local deps, has lockfile)
        if: steps.change-flags.outputs.infra_changed == 'true' && hashFiles('infrastructure/package-lock.json', 'infrastructure/npm-shrinkwrap.json', 'infrastructure/yarn.lock') != ''
        shell: bash
        working-directory: infrastructure
        env:
          CDK_DISABLE_VERSION_CHECK: '1'
        run: |
          set -euo pipefail
          echo "üèóÔ∏è Validating CDK infrastructure (local deps)..."
          npx aws-cdk synth --context environment=dev

      - name: CDK synth (pinned cdk, no lockfile)
        if: steps.change-flags.outputs.infra_changed == 'true' && hashFiles('infrastructure/package-lock.json', 'infrastructure/npm-shrinkwrap.json', 'infrastructure/yarn.lock') == ''
        shell: bash
        working-directory: infrastructure
        env:
          CDK_DISABLE_VERSION_CHECK: '1'
        run: |
          set -euo pipefail
          echo "üèóÔ∏è Validating CDK infrastructure (pinned cdk)..."
          npx aws-cdk@${{ env.AWS_CDK_VERSION }} synth --context environment=dev

      - name: Quick tests (py changed)
        if: steps.change-flags.outputs.python_changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "üß™ Running quick tests..."
          if [[ -d tests ]]; then
            if find tests -name 'test_*.py' -type f -print -quit | grep -q .; then
              pytest tests/ -q --tb=short -x --maxfail=3
            else
              echo "No tests found - skipping"
            fi
          else
            echo "tests/ directory not present - skipping"
          fi
          echo "‚úÖ PR validation complete!"
