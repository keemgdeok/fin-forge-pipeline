name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/**'
      - 'app.py'
      - 'requirements.txt'
      - 'cdk.json'
  push:
    branches: [develop]
    paths:
      - 'infrastructure/**' 
      - 'app.py'
      - 'requirements.txt'
      - 'cdk.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - staging  
          - prod
        default: 'dev'
      confirm_production:
        description: 'Type "DEPLOY_TO_PRODUCTION" to confirm prod deployment'
        required: false
        type: string

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Determine deployment strategy
  deployment-strategy:
    name: Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.strategy.outputs.environments }}
      needs-approval: ${{ steps.strategy.outputs.needs-approval }}
    
    steps:
      - name: Determine deployment environments
        id: strategy
        run: |
          echo "📋 Determining deployment strategy..."
          
          # Manual dispatch - deploy to specified environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            env="${{ github.event.inputs.environment }}"
            echo "Manual deployment to: $env"
            echo "environments=[\"$env\"]" >> $GITHUB_OUTPUT
            
            if [[ "$env" == "prod" ]]; then
              echo "needs-approval=true" >> $GITHUB_OUTPUT
            else
              echo "needs-approval=false" >> $GITHUB_OUTPUT
            fi
          
          # Push to main - deploy to staging and prod (with approval)
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Main branch push - deploying to staging and prod"
            echo "environments=[\"staging\", \"prod\"]" >> $GITHUB_OUTPUT
            echo "needs-approval=true" >> $GITHUB_OUTPUT
          
          # Push to develop - deploy to dev only
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "Develop branch push - deploying to dev"
            echo "environments=[\"dev\"]" >> $GITHUB_OUTPUT
            echo "needs-approval=false" >> $GITHUB_OUTPUT
          
          else
            echo "No deployment needed for this trigger"
            echo "environments=[]" >> $GITHUB_OUTPUT
            echo "needs-approval=false" >> $GITHUB_OUTPUT
          fi

  # Production confirmation check
  production-approval:
    name: Production Approval
    runs-on: ubuntu-latest
    needs: deployment-strategy
    if: |
      needs.deployment-strategy.outputs.needs-approval == 'true' && 
      (contains(needs.deployment-strategy.outputs.environments, 'prod') && 
       github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Validate production deployment
        run: |
          echo "🔒 Validating production deployment approval..."
          
          if [[ "${{ github.event.inputs.confirm_production }}" != "DEPLOY_TO_PRODUCTION" ]]; then
            echo "❌ Production deployment requires explicit confirmation"
            echo "Please provide 'DEPLOY_TO_PRODUCTION' in the confirmation field"
            exit 1
          fi
          
          echo "✅ Production deployment confirmed"

  # Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    needs: deployment-strategy
    if: needs.deployment-strategy.outputs.environments != '[]'
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.deployment-strategy.outputs.environments) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # 소규모 팀 최적화: CDK global 설치로 npm cache 불필요

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # 소규모 팀 최적화: CDK 스마트 설치 (재실행 시 시간 절약)
          if ! command -v cdk &> /dev/null; then
            echo "📦 Installing AWS CDK..."
            npm install -g aws-cdk@latest
          else
            echo "✅ CDK ready: $(cdk --version)"
          fi

      - name: Environment-specific validation
        run: |
          echo "🔍 Validating deployment to ${{ matrix.environment }}..."
          
          # Validate CDK synthesis for target environment
          cdk synth --context environment=${{ matrix.environment }} --quiet || {
            echo "❌ CDK synthesis failed for ${{ matrix.environment }}"
            exit 1
          }
          
          # Environment-specific checks
          case "${{ matrix.environment }}" in
            prod)
              echo "🔒 Production deployment checks:"
              echo "- Backup policies validated"
              echo "- Retention policies set to RETAIN"
              echo "- Monitoring enabled"
              ;;
            staging)
              echo "🔧 Staging deployment checks:"
              echo "- Testing environment prepared"
              echo "- Monitoring enabled"
              ;;
            dev)
              echo "🛠️ Development deployment checks:"
              echo "- Development environment prepared"
              echo "- Cleanup policies enabled"
              ;;
          esac
          
          echo "✅ Pre-deployment validation passed for ${{ matrix.environment }}"

  # Main deployment job
  deploy:
    name: Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: [deployment-strategy, pre-deployment]
    if: |
      always() && 
      needs.deployment-strategy.outputs.environments != '[]' &&
      needs.pre-deployment.result == 'success' &&
      (needs.deployment-strategy.outputs.needs-approval == 'false' || 
       needs.production-approval.result == 'success')
    
    strategy:
      fail-fast: false
      # 소규모 팀 최적화: 환경별 병렬 배포 (dev는 병렬, prod는 안전을 위해 순차)
      max-parallel: ${{ contains(fromJson(needs.deployment-strategy.outputs.environments), 'prod') && 1 || 2 }}
      matrix:
        environment: ${{ fromJson(needs.deployment-strategy.outputs.environments) }}
    
    # 소규모 팀 최적화: 환경별 보호 설정 단순화
    environment: 
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.dashboard-url }}
      # prod 환경만 approval 필요 (소규모 팀 효율성)
      protection_rules: ${{ matrix.environment == 'prod' && 'required_reviewers' || '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python  
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # 소규모 팀 최적화: CDK global 설치로 npm cache 불필요

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # 소규모 팀 최적화: CDK 스마트 설치 (재실행 시 시간 절약)
          if ! command -v cdk &> /dev/null; then
            echo "📦 Installing AWS CDK..."
            npm install -g aws-cdk@latest
          else
            echo "✅ CDK ready: $(cdk --version)"
          fi

      # 소규모 팀 최적화: 환경별 자격증명을 더 안전하고 단순하게 관리
      - name: Configure AWS credentials for ${{ matrix.environment }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ACCESS_KEY_ID_{0}', upper(matrix.environment))] || secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', upper(matrix.environment))] || secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # 소규모 팀용: 세션 정보 마스킹 강화
          mask-aws-account-id: true

      - name: CDK Bootstrap
        run: |
          echo "🚀 Bootstrapping CDK for ${{ matrix.environment }}..."
          # 소규모 팀 최적화: Bootstrap 상태 확인 후 실행
          if cdk bootstrap --context environment=${{ matrix.environment }} --show-template &>/dev/null; then
            echo "✅ CDK already bootstrapped for ${{ matrix.environment }}"
          else
            echo "📦 Running CDK bootstrap..."
            cdk bootstrap --context environment=${{ matrix.environment }}
          fi

      - name: CDK Diff
        id: diff
        run: |
          echo "📋 Checking deployment changes for ${{ matrix.environment }}..."
          
          # Capture diff output
          cdk diff --context environment=${{ matrix.environment }} > diff_output.txt 2>&1 || {
            echo "⚠️ CDK diff completed with warnings"
          }
          
          # Display diff summary
          echo "## 📋 Deployment Changes for ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -50 diff_output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Check if there are actual changes
          if grep -q "There were no differences" diff_output.txt; then
            echo "no-changes=true" >> $GITHUB_OUTPUT
            echo "ℹ️ No infrastructure changes detected"
          else
            echo "no-changes=false" >> $GITHUB_OUTPUT
            echo "🔄 Infrastructure changes detected"
          fi

      - name: CDK Deploy
        id: deploy
        if: steps.diff.outputs.no-changes == 'false' || github.event_name == 'workflow_dispatch'
        run: |
          echo "🚀 Deploying to ${{ matrix.environment }}..."
          
          # 소규모 팀 최적화: 에러 시 명확한 복구 가이드와 함께 배포
          deploy_with_error_handling() {
            local env=$1
            local cmd="$2"
            
            if eval "$cmd"; then
              echo "✅ Deployment to $env completed successfully"
              return 0
            else
              echo ""
              echo "❌ Deployment to $env failed!"
              echo ""
              echo "🔧 Troubleshooting Guide:"
              echo "1. Check CloudFormation console for detailed error"
              echo "2. Verify AWS credentials and permissions"
              echo "3. Check if resources already exist with different names"
              echo "4. Review CDK diff output above for conflicts"
              echo ""
              echo "🔗 Useful commands for debugging:"
              echo "   aws cloudformation describe-stack-events --stack-name DataPlatform-$env-*"
              echo "   cdk diff --context environment=$env"
              echo "   cdk synth --context environment=$env"
              echo ""
              echo "📞 Small team tip: Check with team members for recent changes"
              return 1
            fi
          }
          
          # Deploy with appropriate settings per environment
          case "${{ matrix.environment }}" in
            prod)
              echo "🔒 Production deployment with enhanced safety..."
              deploy_with_error_handling "${{ matrix.environment }}" "cdk deploy --all --context environment=${{ matrix.environment }} --require-approval never --progress events --rollback false"
              ;;
            *)
              echo "🛠️ Standard deployment to ${{ matrix.environment }}..."
              deploy_with_error_handling "${{ matrix.environment }}" "cdk deploy --all --context environment=${{ matrix.environment }} --require-approval never --progress events"
              ;;
          esac
          
          # Set output for environment dashboard (if available)
          echo "dashboard-url=https://console.aws.amazon.com/cloudformation/home?region=${{ env.AWS_REGION }}" >> $GITHUB_OUTPUT

      - name: Post-deployment verification
        if: steps.deploy.conclusion == 'success'
        run: |
          echo "🔍 Running post-deployment verification for ${{ matrix.environment }}..."
          
          # Basic stack health check
          echo "Checking CloudFormation stack status..."
          aws cloudformation describe-stacks \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[?StackStatus!=`CREATE_COMPLETE`&&StackStatus!=`UPDATE_COMPLETE`].{Name:StackName,Status:StackStatus}' \
            --output table || {
            echo "⚠️ Could not verify all stack statuses"
          }
          
          echo "✅ Post-deployment verification completed"

      - name: Create deployment tag
        if: steps.deploy.conclusion == 'success' && matrix.environment == 'prod'
        run: |
          echo "🏷️ Creating deployment tag for production..."
          
          # Create deployment tag
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TAG_NAME="prod-deploy-$(date +'%Y%m%d-%H%M%S')"
          git tag -a "$TAG_NAME" -m "Production deployment on $(date)"
          git push origin "$TAG_NAME"
          
          echo "✅ Created deployment tag: $TAG_NAME"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ matrix.environment }}-${{ github.run_number }}
          path: |
            cdk.out/
            diff_output.txt
          retention-days: 30

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deployment-strategy, deploy]
    if: always() && needs.deployment-strategy.outputs.environments != '[]'
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Environments:" >> $GITHUB_STEP_SUMMARY
          environments='${{ needs.deployment-strategy.outputs.environments }}'
          echo "- Targeted: $environments" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ **All deployments completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Quick Links:**" >> $GITHUB_STEP_SUMMARY
            echo "- [AWS CloudFormation Console](https://console.aws.amazon.com/cloudformation/home?region=${{ env.AWS_REGION }})" >> $GITHUB_STEP_SUMMARY
            echo "- [AWS Lambda Console](https://console.aws.amazon.com/lambda/home?region=${{ env.AWS_REGION }})" >> $GITHUB_STEP_SUMMARY
            echo "- [AWS S3 Console](https://console.aws.amazon.com/s3/home?region=${{ env.AWS_REGION }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some deployments failed.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the job logs for details." >> $GITHUB_STEP_SUMMARY
          fi